import React, { useState, useEffect } from 'react';
import AdminLayout from '../../components/admin/AdminLayout';
import './AdminPages.css';

interface Notification {
  id: number;
  title: string;
  message: string;
  type: string;
  recipient: string;
  status: string;
  createdAt: string;
  sentAt?: string;
}

const Notifications: React.FC = () => {
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [loading, setLoading] = useState(true);
  const [showAddModal, setShowAddModal] = useState(false);
  const [typeFilter, setTypeFilter] = useState('ALL');
  const [statusFilter, setStatusFilter] = useState('ALL');

  useEffect(() => {
    fetchNotifications();
  }, [typeFilter, statusFilter]);

  const fetchNotifications = async () => {
    try {
      setLoading(true);
      // Mock data for now - replace with actual API call
      const mockNotifications: Notification[] = [
        {
          id: 1,
          title: 'Ch√†o m·ª´ng kh√°ch h√†ng m·ªõi',
          message: 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi HotelHub! Ch√∫ng t√¥i h√¢n h·∫°nh ƒë∆∞·ª£c ph·ª•c v·ª• b·∫°n.',
          type: 'WELCOME',
          recipient: 'user1@example.com',
          status: 'SENT',
          createdAt: '2024-01-15T10:00:00Z',
          sentAt: '2024-01-15T10:05:00Z'
        },
        {
          id: 2,
          title: 'X√°c nh·∫≠n ƒë·∫∑t ph√≤ng',
          message: 'ƒê·∫∑t ph√≤ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n. M√£ ƒë·∫∑t ph√≤ng: #12345',
          type: 'BOOKING_CONFIRMATION',
          recipient: 'user2@example.com',
          status: 'SENT',
          createdAt: '2024-01-15T11:00:00Z',
          sentAt: '2024-01-15T11:02:00Z'
        },
        {
          id: 3,
          title: 'Nh·∫Øc nh·ªü thanh to√°n',
          message: 'Vui l√≤ng thanh to√°n ƒë·∫∑t ph√≤ng #12345 trong v√≤ng 24 gi·ªù.',
          type: 'PAYMENT_REMINDER',
          recipient: 'user3@example.com',
          status: 'PENDING',
          createdAt: '2024-01-15T12:00:00Z'
        },
        {
          id: 4,
          title: 'Th√¥ng b√°o b·∫£o tr√¨ h·ªá th·ªëng',
          message: 'H·ªá th·ªëng s·∫Ω b·∫£o tr√¨ t·ª´ 02:00 - 04:00 ng√†y mai.',
          type: 'SYSTEM_MAINTENANCE',
          recipient: 'all@hotelhub.com',
          status: 'SENT',
          createdAt: '2024-01-15T13:00:00Z',
          sentAt: '2024-01-15T13:05:00Z'
        },
        {
          id: 5,
          title: 'Khuy·∫øn m√£i ƒë·∫∑c bi·ªát',
          message: 'Gi·∫£m 20% cho t·∫•t c·∫£ ph√≤ng trong th√°ng n√†y!',
          type: 'PROMOTION',
          recipient: 'all@hotelhub.com',
          status: 'DRAFT',
          createdAt: '2024-01-15T14:00:00Z'
        }
      ];
      setNotifications(mockNotifications);
    } catch (error) {
    } finally {
      setLoading(false);
    }
  };

  const handleSendNotification = async (notificationId: number) => {
    try {
      const token = localStorage.getItem('accessToken');
      const response = await fetch(`/api/notifications/${notificationId}/send`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        setNotifications(notifications.map(notif => 
          notif.id === notificationId 
            ? { ...notif, status: 'SENT', sentAt: new Date().toISOString() }
            : notif
        ));
      }
    } catch (error) {
    }
  };

  const handleDeleteNotification = async (notificationId: number) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a th√¥ng b√°o n√†y?')) {
      try {
        const token = localStorage.getItem('accessToken');
        const response = await fetch(`/api/notifications/${notificationId}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (response.ok) {
          setNotifications(notifications.filter(notif => notif.id !== notificationId));
        }
      } catch (error) {
      }
    }
  };

  const getTypeBadge = (type: string) => {
    const typeMap: { [key: string]: { class: string; text: string } } = {
      'WELCOME': { class: 'type-welcome', text: 'Ch√†o m·ª´ng' },
      'BOOKING_CONFIRMATION': { class: 'type-booking', text: 'X√°c nh·∫≠n ƒë·∫∑t ph√≤ng' },
      'PAYMENT_REMINDER': { class: 'type-payment', text: 'Nh·∫Øc nh·ªü thanh to√°n' },
      'SYSTEM_MAINTENANCE': { class: 'type-system', text: 'B·∫£o tr√¨ h·ªá th·ªëng' },
      'PROMOTION': { class: 'type-promotion', text: 'Khuy·∫øn m√£i' }
    };
    
    const typeInfo = typeMap[type] || { class: 'type-default', text: type };
    return <span className={`type-badge ${typeInfo.class}`}>{typeInfo.text}</span>;
  };

  const getStatusBadge = (status: string) => {
    const statusMap: { [key: string]: { class: string; text: string } } = {
      'DRAFT': { class: 'status-draft', text: 'B·∫£n nh√°p' },
      'PENDING': { class: 'status-pending', text: 'Ch·ªù g·ª≠i' },
      'SENT': { class: 'status-sent', text: 'ƒê√£ g·ª≠i' },
      'FAILED': { class: 'status-failed', text: 'G·ª≠i th·∫•t b·∫°i' }
    };
    
    const statusInfo = statusMap[status] || { class: 'status-default', text: status };
    return <span className={`status-badge ${statusInfo.class}`}>{statusInfo.text}</span>;
  };

  const filteredNotifications = notifications.filter(notif => {
    const matchesType = typeFilter === 'ALL' || notif.type === typeFilter;
    const matchesStatus = statusFilter === 'ALL' || notif.status === statusFilter;
    return matchesType && matchesStatus;
  });

  return (
    <AdminLayout title="Qu·∫£n l√Ω th√¥ng b√°o" breadcrumb="Qu·∫£n l√Ω th√¥ng b√°o">
      <div className="admin-page">
        {/* Header Actions */}
        <div className="admin-page-actions">
          <button 
            className="btn-primary"
            onClick={() => setShowAddModal(true)}
          >
            ‚ûï T·∫°o th√¥ng b√°o m·ªõi
          </button>
        </div>

        {/* Filters */}
        <div className="admin-filters">
          <div className="filter-group">
            <label>Lo·∫°i th√¥ng b√°o:</label>
            <select 
              value={typeFilter} 
              onChange={(e) => setTypeFilter(e.target.value)}
              className="filter-select"
            >
              <option value="ALL">T·∫•t c·∫£</option>
              <option value="WELCOME">Ch√†o m·ª´ng</option>
              <option value="BOOKING_CONFIRMATION">X√°c nh·∫≠n ƒë·∫∑t ph√≤ng</option>
              <option value="PAYMENT_REMINDER">Nh·∫Øc nh·ªü thanh to√°n</option>
              <option value="SYSTEM_MAINTENANCE">B·∫£o tr√¨ h·ªá th·ªëng</option>
              <option value="PROMOTION">Khuy·∫øn m√£i</option>
            </select>
          </div>
          
          <div className="filter-group">
            <label>Tr·∫°ng th√°i:</label>
            <select 
              value={statusFilter} 
              onChange={(e) => setStatusFilter(e.target.value)}
              className="filter-select"
            >
              <option value="ALL">T·∫•t c·∫£</option>
              <option value="DRAFT">B·∫£n nh√°p</option>
              <option value="PENDING">Ch·ªù g·ª≠i</option>
              <option value="SENT">ƒê√£ g·ª≠i</option>
              <option value="FAILED">G·ª≠i th·∫•t b·∫°i</option>
            </select>
          </div>
        </div>

        {/* Notifications Table */}
        <div className="admin-table-container">
          {loading ? (
            <div className="loading">ƒêang t·∫£i...</div>
          ) : (
            <table className="admin-table">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Ti√™u ƒë·ªÅ</th>
                  <th>Lo·∫°i</th>
                  <th>Ng∆∞·ªùi nh·∫≠n</th>
                  <th>Tr·∫°ng th√°i</th>
                  <th>Ng√†y t·∫°o</th>
                  <th>Ng√†y g·ª≠i</th>
                  <th>Thao t√°c</th>
                </tr>
              </thead>
              <tbody>
                {filteredNotifications.map((notif) => (
                  <tr key={notif.id}>
                    <td>{notif.id}</td>
                    <td>
                      <div className="notification-title">
                        <strong>{notif.title}</strong>
                        <p className="notification-preview">{notif.message.substring(0, 50)}...</p>
                      </div>
                    </td>
                    <td>{getTypeBadge(notif.type)}</td>
                    <td>{notif.recipient}</td>
                    <td>{getStatusBadge(notif.status)}</td>
                    <td>{new Date(notif.createdAt).toLocaleDateString('vi-VN')}</td>
                    <td>{notif.sentAt ? new Date(notif.sentAt).toLocaleDateString('vi-VN') : '-'}</td>
                    <td>
                      {notif.status === 'PENDING' && (
                        <button 
                          className="btn-action btn-send"
                          onClick={() => handleSendNotification(notif.id)}
                        >
                          üì§ G·ª≠i
                        </button>
                      )}
                      <button className="btn-action btn-edit">‚úèÔ∏è S·ª≠a</button>
                      <button 
                        className="btn-action btn-delete"
                        onClick={() => handleDeleteNotification(notif.id)}
                      >
                        üóëÔ∏è X√≥a
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>

        {/* Add/Edit Modal */}
        {showAddModal && (
          <div className="modal-overlay">
            <div className="modal">
              <div className="modal-header">
                <h2>T·∫°o th√¥ng b√°o m·ªõi</h2>
                <button 
                  className="modal-close"
                  onClick={() => setShowAddModal(false)}
                >
                  ‚úï
                </button>
              </div>
              <div className="modal-content">
                <form>
                  <div className="form-group">
                    <label>Ti√™u ƒë·ªÅ:</label>
                    <input type="text" className="form-input" placeholder="Nh·∫≠p ti√™u ƒë·ªÅ..." />
                  </div>
                  <div className="form-group">
                    <label>Lo·∫°i th√¥ng b√°o:</label>
                    <select className="form-select">
                      <option value="WELCOME">Ch√†o m·ª´ng</option>
                      <option value="BOOKING_CONFIRMATION">X√°c nh·∫≠n ƒë·∫∑t ph√≤ng</option>
                      <option value="PAYMENT_REMINDER">Nh·∫Øc nh·ªü thanh to√°n</option>
                      <option value="SYSTEM_MAINTENANCE">B·∫£o tr√¨ h·ªá th·ªëng</option>
                      <option value="PROMOTION">Khuy·∫øn m√£i</option>
                    </select>
                  </div>
                  <div className="form-group">
                    <label>Ng∆∞·ªùi nh·∫≠n:</label>
                    <input type="text" className="form-input" placeholder="Email ho·∫∑c 'all' cho t·∫•t c·∫£" />
                  </div>
                  <div className="form-group">
                    <label>N·ªôi dung:</label>
                    <textarea className="form-input" rows={4} placeholder="Nh·∫≠p n·ªôi dung th√¥ng b√°o..."></textarea>
                  </div>
                  <div className="form-actions">
                    <button type="button" className="btn-secondary" onClick={() => setShowAddModal(false)}>
                      H·ªßy
                    </button>
                    <button type="button" className="btn-secondary">
                      L∆∞u b·∫£n nh√°p
                    </button>
                    <button type="submit" className="btn-primary">
                      T·∫°o v√† g·ª≠i
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default Notifications;

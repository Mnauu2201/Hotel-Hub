import React, { useState, useEffect } from 'react';
import AdminLayout from '../../components/admin/AdminLayout';
import { getNotifications, sendNotification, deleteNotification } from '../../services/notificationsApi';
import './AdminPages.css';

interface Notification {
  id: number;
  title: string;
  message: string;
  type: string;
  recipient: string;
  status: string;
  createdAt: string;
  sentAt?: string;
}

const Notifications: React.FC = () => {
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [loading, setLoading] = useState(true);
  const [typeFilter, setTypeFilter] = useState('ALL');
  const [statusFilter, setStatusFilter] = useState('ALL');

  useEffect(() => {
    fetchNotifications();
  }, [typeFilter, statusFilter]);

  const fetchNotifications = async () => {
    try {
      setLoading(true);
      console.log('üîÑ Fetching notifications from API...');
      
      // Try API call first
      try {
        console.log('üîç Filter values:', { typeFilter, statusFilter });
        
        const apiData = await getNotifications({
          type: typeFilter,
          status: statusFilter,
          sortBy: 'createdAt',
          sortDir: 'desc'
        });
        
        console.log('‚úÖ API data received:', apiData);
        setNotifications(apiData);
        return;
      } catch (apiError) {
        console.log('‚ö†Ô∏è API call failed, using mock data:', apiError);
      }
      
      // Fallback to mock data if API fails
      const mockNotifications: Notification[] = [
        {
          id: 1,
          title: 'Ch√†o m·ª´ng kh√°ch h√†ng m·ªõi',
          message: 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi HotelHub! Ch√∫ng t√¥i h√¢n h·∫°nh ƒë∆∞·ª£c ph·ª•c v·ª•.',
          type: 'WELCOME',
          recipient: 'user1@example.com',
          status: 'SENT',
          createdAt: '2024-01-15T10:00:00Z',
          sentAt: '2024-01-15T10:05:00Z'
        },
        {
          id: 2,
          title: 'X√°c nh·∫≠n ƒë·∫∑t ph√≤ng',
          message: 'ƒê·∫∑t ph√≤ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n. M√£ ƒë·∫∑t ph√≤ng: #12345',
          type: 'BOOKING_CONFIRMATION',
          recipient: 'user2@example.com',
          status: 'SENT',
          createdAt: '2024-01-15T11:00:00Z',
          sentAt: '2024-01-15T11:02:00Z'
        },
        {
          id: 3,
          title: 'Nh·∫Øc nh·ªü thanh to√°n',
          message: 'Vui l√≤ng thanh to√°n ƒë·∫∑t ph√≤ng #12345 trong v√≤ng 24 gi·ªù.',
          type: 'PAYMENT_REMINDER',
          recipient: 'user3@example.com',
          status: 'PENDING',
          createdAt: '2024-01-15T12:00:00Z'
        },
        {
          id: 4,
          title: 'Th√¥ng b√°o b·∫£o tr√¨ h·ªá th·ªëng',
          message: 'H·ªá th·ªëng s·∫Ω b·∫£o tr√¨ t·ª´ 02:00 - 04:00 ng√†y mai.',
          type: 'SYSTEM_MAINTENANCE',
          recipient: 'all@hotelhub.com',
          status: 'SENT',
          createdAt: '2024-01-15T13:00:00Z',
          sentAt: '2024-01-15T13:05:00Z'
        },
        {
          id: 5,
          title: 'Khuy·∫øn m√£i ƒë·∫∑c bi·ªát',
          message: 'Gi·∫£m 20% cho t·∫•t c·∫£ ph√≤ng trong th√°ng n√†y!',
          type: 'PROMOTION',
          recipient: 'all@hotelhub.com',
          status: 'DRAFT',
          createdAt: '2024-01-15T14:00:00Z'
        }
      ];
      
      setNotifications(mockNotifications);
    } catch (error) {
      console.error('üí• Error fetching notifications:', error);
      setNotifications([]);
    } finally {
      setLoading(false);
    }
  };

  const getTypeBadge = (type: string) => {
    const typeMap: { [key: string]: { text: string; class: string } } = {
      'WELCOME': { text: 'Ch√†o m·ª´ng', class: 'type-welcome' },
      'BOOKING_CONFIRMATION': { text: 'X√°c nh·∫≠n ƒë·∫∑t ph√≤ng', class: 'type-booking' },
      'BOOKING_CREATED': { text: 'T·∫°o ƒë·∫∑t ph√≤ng', class: 'type-booking' },
      'PAYMENT_REMINDER': { text: 'Nh·∫Øc nh·ªü thanh to√°n', class: 'type-payment' },
      'SYSTEM_MAINTENANCE': { text: 'B·∫£o tr√¨ h·ªá th·ªëng', class: 'type-maintenance' },
      'PROMOTION': { text: 'Khuy·∫øn m√£i', class: 'type-promotion' }
    };
    return typeMap[type] || { text: type, class: 'type-default' };
  };

  const getStatusBadge = (status: string) => {
    const statusMap: { [key: string]: { text: string; class: string } } = {
      'SENT': { text: 'ƒê√É G·ª¨I', class: 'status-sent' },
      'PENDING': { text: 'CH·ªú G·ª¨I', class: 'status-pending' },
      'DRAFT': { text: 'B·∫¢N NH√ÅP', class: 'status-draft' },
      'FAILED': { text: 'TH·∫§T B·∫†I', class: 'status-failed' }
    };
    return statusMap[status] || { text: status, class: 'status-default' };
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('vi-VN');
  };

  const handleSendNotification = async (id: number) => {
    try {
      console.log('üì§ Sending notification:', id);
      await sendNotification(id);
      console.log('‚úÖ Notification sent successfully');
      // Refresh the list
      fetchNotifications();
    } catch (error) {
      console.error('üí• Failed to send notification:', error);
      alert('Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  const handleDeleteNotification = async (id: number) => {
    if (!window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a th√¥ng b√°o n√†y?')) {
      return;
    }
    
    try {
      console.log('üóëÔ∏è Deleting notification:', id);
      await deleteNotification(id);
      console.log('‚úÖ Notification deleted successfully');
      // Refresh the list
      fetchNotifications();
    } catch (error) {
      console.error('üí• Failed to delete notification:', error);
      alert('Kh√¥ng th·ªÉ x√≥a th√¥ng b√°o. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  if (loading) {
    return (
      <AdminLayout title="Qu·∫£n l√Ω th√¥ng b√°o" breadcrumb="Qu·∫£n l√Ω th√¥ng b√°o">
        <div className="admin-page">
          <div className="loading">ƒêang t·∫£i...</div>
        </div>
      </AdminLayout>
    );
  }

  return (
    <AdminLayout title="Qu·∫£n l√Ω th√¥ng b√°o" breadcrumb="Qu·∫£n l√Ω th√¥ng b√°o">
      <div className="admin-page">
        {/* Header Actions */}
        <div className="admin-page-actions">
          <button 
            className="btn-primary"
            onClick={() => console.log('Create notification')}
          >
            ‚ûï T·∫°o th√¥ng b√°o m·ªõi
          </button>
        </div>

        {/* Filters */}
        <div className="admin-filters">
          <div className="filter-group">
            <label>Lo·∫°i th√¥ng b√°o:</label>
            <select 
              value={typeFilter} 
              onChange={(e) => setTypeFilter(e.target.value)}
              className="filter-select"
            >
              <option value="ALL">T·∫•t c·∫£</option>
              <option value="WELCOME">Ch√†o m·ª´ng</option>
              <option value="BOOKING_CONFIRMATION">X√°c nh·∫≠n ƒë·∫∑t ph√≤ng</option>
              <option value="BOOKING_CREATED">T·∫°o ƒë·∫∑t ph√≤ng</option>
              <option value="PAYMENT_REMINDER">Nh·∫Øc nh·ªü thanh to√°n</option>
              <option value="SYSTEM_MAINTENANCE">B·∫£o tr√¨ h·ªá th·ªëng</option>
              <option value="PROMOTION">Khuy·∫øn m√£i</option>
            </select>
          </div>
          <div className="filter-group">
            <label>Tr·∫°ng th√°i:</label>
            <select 
              value={statusFilter} 
              onChange={(e) => setStatusFilter(e.target.value)}
              className="filter-select"
            >
              <option value="ALL">T·∫•t c·∫£</option>
              <option value="SENT">ƒê√£ g·ª≠i</option>
              <option value="PENDING">Ch·ªù g·ª≠i</option>
              <option value="DRAFT">B·∫£n nh√°p</option>
              <option value="FAILED">Th·∫•t b·∫°i</option>
            </select>
          </div>
        </div>

        {/* Notifications Table */}
        <div className="admin-table-container">
          <table className="admin-table">
            <thead>
              <tr>
                <th>ID</th>
                <th>Ti√™u ƒë·ªÅ</th>
                <th>Lo·∫°i</th>
                <th>Ng∆∞·ªùi nh·∫≠n</th>
                <th>Tr·∫°ng th√°i</th>
                <th>Ng√†y t·∫°o</th>
                <th>Ng√†y g·ª≠i</th>
                <th>Thao t√°c</th>
              </tr>
            </thead>
            <tbody>
              {notifications.length === 0 ? (
                <tr>
                  <td colSpan={8} className="text-center">
                    Kh√¥ng c√≥ th√¥ng b√°o n√†o
                  </td>
                </tr>
              ) : (
                notifications.map((notification) => {
                  const typeInfo = getTypeBadge(notification.type);
                  const statusInfo = getStatusBadge(notification.status);
                  
                  return (
                    <tr key={notification.id}>
                      <td>{notification.id}</td>
                      <td>
                        <div>
                          <strong>{notification.title}</strong>
                          <div className="notification-message">
                            {notification.message}
                          </div>
                        </div>
                      </td>
                      <td>
                        <span className={`type-badge ${typeInfo.class}`}>
                          {typeInfo.text}
                        </span>
                      </td>
                      <td>{notification.recipient}</td>
                      <td>
                        <span className={`status-badge ${statusInfo.class}`}>
                          {statusInfo.text}
                        </span>
                      </td>
                      <td>{formatDate(notification.createdAt)}</td>
                      <td>{notification.sentAt ? formatDate(notification.sentAt) : '-'}</td>
                      <td>
                        <div className="action-buttons">
                          {notification.status === 'PENDING' && (
                            <button 
                              className="btn-action btn-send"
                              onClick={() => handleSendNotification(notification.id)}
                            >
                              G·ª≠i
                            </button>
                          )}
                          <button className="btn-action btn-edit">S·ª≠a</button>
                          <button 
                            className="btn-action btn-delete"
                            onClick={() => handleDeleteNotification(notification.id)}
                          >
                            X√≥a
                          </button>
                        </div>
                      </td>
                    </tr>
                  );
                })
              )}
            </tbody>
          </table>
        </div>
      </div>
    </AdminLayout>
  );
};

export default Notifications;
import React, { useState, useEffect } from 'react';
import AdminLayout from '../../components/admin/AdminLayout';
import { useNotification } from '../../hooks/useNotification';
import './AdminPages.css';

interface User {
  id: number;
  name: string;
  email: string;
  phone: string;
  enabled: boolean;
  emailVerified: boolean;
  roles: string[];
  createdAt: string;
}

const UserManagement: React.FC = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [roleFilter, setRoleFilter] = useState('ALL');
  const [showEditModal, setShowEditModal] = useState(false);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [editFormData, setEditFormData] = useState<Partial<User>>({});
  const { showSuccess, showError, showWarning, showInfo, NotificationContainer } = useNotification();

  useEffect(() => {
    fetchUsers();
  }, []);

  const fetchUsers = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem('accessToken');
      
      if (!token) {
        showError('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p trang n√†y');
        return;
      }

      const response = await fetch('/api/admin/users', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        setUsers(data.users || []);
      } else if (response.status === 401) {
        showError('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
      } else if (response.status === 403) {
        showError('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y.');
      } else {
        showError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng');
      }
    } catch (error) {
      showError('L·ªói k·∫øt n·ªëi khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng: ' + (error as Error).message);
      setUsers([]);
    } finally {
      setLoading(false);
    }
  };

  const handleToggleUserStatus = async (userId: number, currentStatus: boolean) => {
    try {
      const token = localStorage.getItem('accessToken');
      const response = await fetch(`/api/admin/users/${userId}/toggle-status`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ enabled: !currentStatus })
      });
      
      if (response.ok) {
        showSuccess(currentStatus ? 'ƒê√£ kh√≥a ng∆∞·ªùi d√πng' : 'ƒê√£ m·ªü kh√≥a ng∆∞·ªùi d√πng');
        setUsers(users.map(user => 
          user.id === userId 
            ? { ...user, enabled: !currentStatus }
            : user
        ));
      } else {
        const errorData = await response.json();
        showError('L·ªói: ' + (errorData.message || 'Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i ng∆∞·ªùi d√πng'));
      }
    } catch (error) {
      showError('L·ªói k·∫øt n·ªëi: ' + (error as Error).message);
    }
  };

  const handleEditUser = (user: User) => {
    setSelectedUser(user);
    setEditFormData({
      name: user.name,
      email: user.email,
      phone: user.phone,
      enabled: user.enabled,
      roles: user.roles
    });
    setShowEditModal(true);
  };

  const handleUpdateUser = async () => {
    if (!selectedUser) return;

    try {
      const token = localStorage.getItem('accessToken');
      const response = await fetch(`/api/admin/users/${selectedUser.id}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(editFormData)
      });

      if (response.ok) {
        showSuccess('C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng!');
        setShowEditModal(false);
        setSelectedUser(null);
        fetchUsers(); // Refresh the list
      } else {
        const errorData = await response.json();
        showError('L·ªói: ' + (errorData.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng'));
      }
    } catch (error) {
      showError('L·ªói k·∫øt n·ªëi: ' + (error as Error).message);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setEditFormData(prev => ({
      ...prev,
      [name]: name === 'roles' ? [value] : value
    }));
  };

  const getRoleBadge = (roles: string[] | undefined) => {
    // ƒê·∫£m b·∫£o roles l√† array
    const rolesArray = Array.isArray(roles) ? roles : [];
    
    if (rolesArray.includes('ROLE_ADMIN')) {
      return <span className="role-badge role-admin">Admin</span>;
    } else if (rolesArray.includes('ROLE_STAFF')) {
      return <span className="role-badge role-staff">Staff</span>;
    } else {
      return <span className="role-badge role-customer">Customer</span>;
    }
  };

  const filteredUsers = users.filter(user => {
    const matchesSearch = (user.name?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||
                         (user.email?.toLowerCase() || '').includes(searchTerm.toLowerCase());
    const userRoles = Array.isArray(user.roles) ? user.roles : [];
    const matchesRole = roleFilter === 'ALL' || userRoles.includes(roleFilter);
    return matchesSearch && matchesRole;
  });

  return (
    <AdminLayout title="Qu·∫£n l√Ω ng∆∞·ªùi d√πng" breadcrumb="Qu·∫£n l√Ω ng∆∞·ªùi d√πng">
      <NotificationContainer />
      <div className="admin-page">
        {/* Filters */}
        <div className="admin-filters">
          <div className="filter-group">
            <label>Vai tr√≤:</label>
            <select 
              value={roleFilter} 
              onChange={(e) => setRoleFilter(e.target.value)}
              className="filter-select"
            >
              <option value="ALL">T·∫•t c·∫£</option>
              <option value="ROLE_ADMIN">Admin</option>
              <option value="ROLE_STAFF">Staff</option>
              <option value="ROLE_CUSTOMER">Customer</option>
            </select>
          </div>
          
          <div className="filter-group">
            <label>T√¨m ki·∫øm:</label>
            <input
              type="text"
              placeholder="T√™n ho·∫∑c email..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="filter-input"
            />
          </div>
        </div>

        {/* Users Table */}
        <div className="admin-table-container">
          {loading ? (
            <div className="loading">ƒêang t·∫£i...</div>
          ) : Array.isArray(users) && users.length > 0 ? (
            <table className="admin-table">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>T√™n</th>
                  <th>Email</th>
                  <th>S·ªë ƒëi·ªán tho·∫°i</th>
                  <th>Vai tr√≤</th>
                  <th>Tr·∫°ng th√°i</th>
                  <th>Email x√°c th·ª±c</th>
                  <th>Ng√†y t·∫°o</th>
                  <th>Thao t√°c</th>
                </tr>
              </thead>
              <tbody>
                {filteredUsers.map((user) => (
                  <tr key={user.id}>
                    <td>{user.id}</td>
                    <td>{user.name}</td>
                    <td>{user.email}</td>
                    <td>{user.phone}</td>
                    <td>{getRoleBadge(user.roles)}</td>
                    <td>
                      <span className={`status-badge ${user.enabled ? 'status-active' : 'status-inactive'}`}>
                        {user.enabled ? 'Ho·∫°t ƒë·ªông' : 'T·∫°m kh√≥a'}
                      </span>
                    </td>
                    <td>
                      <span className={`status-badge ${user.emailVerified ? 'status-verified' : 'status-unverified'}`}>
                        {user.emailVerified ? 'ƒê√£ x√°c th·ª±c' : 'Ch∆∞a x√°c th·ª±c'}
                      </span>
                    </td>
                    <td>{new Date(user.createdAt).toLocaleDateString('vi-VN')}</td>
                    <td>
                      <button 
                        className="btn-action btn-toggle"
                        onClick={() => handleToggleUserStatus(user.id, user.enabled)}
                      >
                        {user.enabled ? 'üîí Kh√≥a' : 'üîì M·ªü kh√≥a'}
                      </button>
                      <button 
                        className="btn-action btn-edit"
                        onClick={() => handleEditUser(user)}
                      >
                        ‚úèÔ∏è S·ª≠a
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          ) : (
            <div className="no-data">
              <p>Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o ƒë∆∞·ª£c t√¨m th·∫•y.</p>
            </div>
          )}
        </div>

        {/* Edit User Modal */}
        {showEditModal && selectedUser && (
          <div className="modal-overlay" onClick={() => setShowEditModal(false)}>
            <div className="modal-content" onClick={(e) => e.stopPropagation()}>
              <div className="modal-header">
                <h3>S·ª≠a th√¥ng tin ng∆∞·ªùi d√πng</h3>
                <button className="modal-close" onClick={() => setShowEditModal(false)}>√ó</button>
              </div>
              <div className="modal-body">
                <div className="form-group">
                  <label>T√™n:</label>
                  <input
                    type="text"
                    name="name"
                    value={editFormData.name || ''}
                    onChange={handleInputChange}
                    className="form-input"
                  />
                </div>
                <div className="form-group">
                  <label>Email:</label>
                  <input
                    type="email"
                    name="email"
                    value={editFormData.email || ''}
                    onChange={handleInputChange}
                    className="form-input"
                  />
                </div>
                <div className="form-group">
                  <label>S·ªë ƒëi·ªán tho·∫°i:</label>
                  <input
                    type="tel"
                    name="phone"
                    value={editFormData.phone || ''}
                    onChange={handleInputChange}
                    className="form-input"
                  />
                </div>
                <div className="form-group">
                  <label>Vai tr√≤:</label>
                  <select
                    name="roles"
                    value={editFormData.roles?.[0] || ''}
                    onChange={handleInputChange}
                    className="form-input"
                  >
                    <option value="ROLE_CUSTOMER">Customer</option>
                    <option value="ROLE_STAFF">Staff</option>
                    <option value="ROLE_ADMIN">Admin</option>
                  </select>
                </div>
                <div className="form-group">
                  <label>
                    <input
                      type="checkbox"
                      name="enabled"
                      checked={editFormData.enabled || false}
                      onChange={(e) => setEditFormData(prev => ({
                        ...prev,
                        enabled: e.target.checked
                      }))}
                    />
                    T√†i kho·∫£n ho·∫°t ƒë·ªông
                  </label>
                </div>
              </div>
              <div className="modal-footer">
                <button className="btn-secondary" onClick={() => setShowEditModal(false)}>
                  H·ªßy
                </button>
                <button className="btn-primary" onClick={handleUpdateUser}>
                  C·∫≠p nh·∫≠t
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default UserManagement;

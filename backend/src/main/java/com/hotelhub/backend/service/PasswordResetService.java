package com.hotelhub.backend.service;

import com.hotelhub.backend.entity.PasswordResetToken;
import com.hotelhub.backend.entity.User;
import com.hotelhub.backend.repository.PasswordResetTokenRepository;
import com.hotelhub.backend.repository.UserRepository;
import jakarta.mail.MessagingException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.security.SecureRandom;
import java.time.LocalDateTime;

@Service
@Slf4j
public class PasswordResetService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordResetTokenRepository passwordResetTokenRepository;

    @Autowired
    private EmailService emailService;

    @Autowired
    private PasswordEncoder passwordEncoder;

    private static final SecureRandom random = new SecureRandom();

    /**
     * G·ª≠i m√£ OTP 6 ch·ªØ s·ªë v·ªÅ email
     */
    @Transactional
    public void sendPasswordResetOTP(String email) {
        // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng"));

        // T·∫°o m√£ OTP 6 ch·ªØ s·ªë
        String otp = generateOTP();

        // L∆∞u OTP v√†o database
        PasswordResetToken token = new PasswordResetToken();
        token.setEmail(email);
        token.setOtp(otp);
        passwordResetTokenRepository.save(token);

        // G·ª≠i email ch·ª©a m√£ OTP
        String subject = "M√£ x√°c th·ª±c ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u - HotelHub";
        String htmlContent = buildEmailTemplate(user.getName(), otp);

        try {
            emailService.sendHtmlEmail(email, subject, htmlContent);
            log.info("ƒê√£ g·ª≠i OTP th√†nh c√¥ng ƒë·∫øn email: {}", email);
        } catch (MessagingException e) {
            log.error("L·ªói khi g·ª≠i email OTP: ", e);
            throw new RuntimeException("Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i sau.");
        }
    }

    /**
     * X√°c th·ª±c m√£ OTP
     */
    public boolean verifyOTP(String email, String otp) {
        return passwordResetTokenRepository.findByEmailAndOtpAndUsedFalse(email, otp)
                .map(token -> {
                    // Ki·ªÉm tra OTP c√≥ h·∫øt h·∫°n kh√¥ng
                    if (token.getExpiresAt().isBefore(LocalDateTime.now())) {
                        log.warn("OTP ƒë√£ h·∫øt h·∫°n cho email: {}", email);
                        return false;
                    }
                    log.info("OTP h·ª£p l·ªá cho email: {}", email);
                    return true;
                })
                .orElse(false);
    }

    /**
     * ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi
     */
    @Transactional
    public void resetPassword(String email, String otp, String newPassword) {
        // T√¨m token OTP
        PasswordResetToken token = passwordResetTokenRepository.findByEmailAndOtpAndUsedFalse(email, otp)
                .orElseThrow(() -> new RuntimeException("M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng"));

        // Ki·ªÉm tra OTP c√≥ h·∫øt h·∫°n kh√¥ng
        if (token.getExpiresAt().isBefore(LocalDateTime.now())) {
            throw new RuntimeException("M√£ OTP ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu m√£ m·ªõi.");
        }

        // T√¨m user
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
        user.setPassword(passwordEncoder.encode(newPassword));
        userRepository.save(user);

        // ƒê√°nh d·∫•u token ƒë√£ s·ª≠ d·ª•ng
        token.setUsed(true);
        passwordResetTokenRepository.save(token);

        log.info("ƒê√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng cho email: {}", email);
    }

    /**
     * T·∫°o m√£ OTP 6 ch·ªØ s·ªë ng·∫´u nhi√™n
     */
    private String generateOTP() {
        int otp = 100000 + random.nextInt(900000); // T·∫°o s·ªë t·ª´ 100000 ƒë·∫øn 999999
        return String.valueOf(otp);
    }

    /**
     * T·∫°o template email HTML ƒë·∫πp m·∫Øt
     */
    private String buildEmailTemplate(String userName, String otp) {
        return "<!DOCTYPE html>" +
                "<html lang='vi'>" +
                "<head>" +
                "    <meta charset='UTF-8'>" +
                "    <meta name='viewport' content='width=device-width, initial-scale=1.0'>" +
                "    <style>" +
                "        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #f4f4f4; margin: 0; padding: 0; }" +
                "        .container { max-width: 600px; margin: 40px auto; background-color: #ffffff; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); overflow: hidden; }" +
                "        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; }" +
                "        .header h1 { margin: 0; font-size: 28px; }" +
                "        .content { padding: 40px 30px; }" +
                "        .otp-box { background-color: #f8f9fa; border: 2px dashed #667eea; border-radius: 8px; padding: 25px; text-align: center; margin: 30px 0; }" +
                "        .otp-code { font-size: 36px; font-weight: bold; color: #667eea; letter-spacing: 8px; margin: 10px 0; }" +
                "        .warning { background-color: #fff3cd; border-left: 4px solid #ffc107; padding: 15px; margin: 20px 0; border-radius: 4px; }" +
                "        .footer { background-color: #f8f9fa; padding: 20px; text-align: center; font-size: 12px; color: #6c757d; }" +
                "        .btn { display: inline-block; background-color: #667eea; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; margin-top: 20px; }" +
                "    </style>" +
                "</head>" +
                "<body>" +
                "    <div class='container'>" +
                "        <div class='header'>" +
                "            <h1>üè® HotelHub</h1>" +
                "            <p>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</p>" +
                "        </div>" +
                "        <div class='content'>" +
                "            <h2>Xin ch√†o " + userName + ",</h2>" +
                "            <p>B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n HotelHub c·ªßa m√¨nh. Vui l√≤ng s·ª≠ d·ª•ng m√£ x√°c th·ª±c d∆∞·ªõi ƒë√¢y:</p>" +
                "            <div class='otp-box'>" +
                "                <p style='margin: 0; color: #6c757d;'>M√£ x√°c th·ª±c c·ªßa b·∫°n</p>" +
                "                <div class='otp-code'>" + otp + "</div>" +
                "                <p style='margin: 0; color: #6c757d; font-size: 14px;'>M√£ c√≥ hi·ªáu l·ª±c trong 5 ph√∫t</p>" +
                "            </div>" +
                "            <div class='warning'>" +
                "                <strong>‚ö†Ô∏è L∆∞u √Ω:</strong> Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai. ƒê·ªôi ng≈© HotelHub s·∫Ω kh√¥ng bao gi·ªù y√™u c·∫ßu m√£ x√°c th·ª±c c·ªßa b·∫°n." +
                "            </div>" +
                "            <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y. T√†i kho·∫£n c·ªßa b·∫°n v·∫´n an to√†n.</p>" +
                "        </div>" +
                "        <div class='footer'>" +
                "            <p>¬© 2025 HotelHub. All rights reserved.</p>" +
                "            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>" +
                "        </div>" +
                "    </div>" +
                "</body>" +
                "</html>";
    }

    /**
     * T·ª± ƒë·ªông x√≥a c√°c token OTP ƒë√£ h·∫øt h·∫°n m·ªói gi·ªù
     */
    @Scheduled(fixedRate = 3600000) // Ch·∫°y m·ªói 1 gi·ªù
    @Transactional
    public void cleanupExpiredTokens() {
        passwordResetTokenRepository.deleteByExpiresAtBefore(LocalDateTime.now());
        log.info("ƒê√£ x√≥a c√°c OTP token h·∫øt h·∫°n");
    }
}